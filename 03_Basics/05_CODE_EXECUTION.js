// Memory phase...
// Execution phase...

// -------------------------------------------------------------
// üß† HOW JAVASCRIPT EXECUTES CODE + CALL STACK
// -------------------------------------------------------------

// üëâ Step 1: Every JS code runs inside a JS Engine (like V8 in Chrome)
// Engine has two main parts:
//   1. Memory (Heap) ‚Äî stores variables and function definitions
//   2. Call Stack ‚Äî manages execution order of code

// -------------------------------------------------------------
// ‚öôÔ∏è  STEP 2: GLOBAL EXECUTION CONTEXT (GEC)
// -------------------------------------------------------------
// Whenever you run a JS file, a Global Execution Context (GEC) is created.
// It has 2 phases:
//   A. Memory Creation Phase (also called Hoisting Phase)
//   B. Execution Phase

// Example code:
var num = 2;
function square(n) {
    return n * n;
}
var result = square(num);

// -------------------------------------------------------------
// üß© MEMORY CREATION PHASE
// -------------------------------------------------------------
// JS scans the code before executing and allocates memory:
// - Variables are set to "undefined"
// - Function definitions are stored entirely

// Internally memory looks like this:
// num     -> undefined
// square  -> function code (its entire body)
// result  -> undefined

// -------------------------------------------------------------
// üöÄ EXECUTION PHASE
// -------------------------------------------------------------
// JS now executes the code line by line.
// - Assign values to variables
// - When a function is called, a NEW execution context is created for it

// Execution flow:
// 1Ô∏è‚É£ num = 2
// 2Ô∏è‚É£ result = square(num)  ‚Üí function call ‚Üí new context created
// 3Ô∏è‚É£ inside square(): n = 2 ‚Üí return 4
// 4Ô∏è‚É£ function finishes ‚Üí context removed
// 5Ô∏è‚É£ final result = 4

// -------------------------------------------------------------
// ‚ö° TYPES OF EXECUTION CONTEXTS
// -------------------------------------------------------------
// 1. Global Execution Context (default, created once)
// 2. Function Execution Context (created on each function call)
// 3. Eval Execution Context (rarely used, from eval())

// -------------------------------------------------------------
// üîÅ CALL STACK (Execution Stack)
// -------------------------------------------------------------
// Call Stack is a data structure (LIFO - Last In, First Out)
// It keeps track of all execution contexts.

// Example:
function one() {
    console.log("Inside One");
    two();
}

function two() {
    console.log("Inside Two");
}

one();
console.log("End");

// -------------------------------------------------------------
// Step-by-step working:
// -------------------------------------------------------------
// 1Ô∏è‚É£ GEC is created ‚Üí pushed to call stack
// 2Ô∏è‚É£ one() is called ‚Üí new Function Execution Context created ‚Üí pushed
// 3Ô∏è‚É£ inside one(), two() is called ‚Üí another Execution Context created ‚Üí pushed
// 4Ô∏è‚É£ two() finishes ‚Üí popped from stack
// 5Ô∏è‚É£ one() finishes ‚Üí popped from stack
// 6Ô∏è‚É£ finally GEC popped ‚Üí stack becomes empty

// Visual representation:
// CALL STACK (Top ‚Üí Bottom)
// | two()  |   ‚Üê currently executing
// | one()  |
// | GEC    |

// After two() completes:
// | one()  |
// | GEC    |

// After one() completes:
// | GEC    |

// After program ends:
// (empty stack)

// -------------------------------------------------------------
// üì¶ IMPORTANT POINTS
// -------------------------------------------------------------
// ‚úÖ JavaScript is single-threaded (only one call stack)
// ‚úÖ Executes synchronously by default (one line at a time)
// ‚úÖ Async code (setTimeout, fetch, etc.) handled by Event Loop + Web APIs
// ‚úÖ When call stack is empty, event loop pushes pending callbacks to it

// -------------------------------------------------------------
// üß≠ QUICK MINI EXAMPLE
// -------------------------------------------------------------
function sayHi() {
    console.log("Hi");
}
function greet() {
    sayHi();
    console.log("Hello");
}
greet();

// Output:
// Hi
// Hello

// Stack Flow:
// Push GEC
// Push greet()
// Push sayHi()
// Pop sayHi()
// Pop greet()
// Pop GEC (Program ends)

// -------------------------------------------------------------
// üí° RECAP
// -------------------------------------------------------------
// üß† Execution Context = environment where JS runs
// üì¶ Memory Phase = variables/functions allocated
// ‚öôÔ∏è Execution Phase = line-by-line execution
// üìö Call Stack = manages active execution contexts
// ‚ö° Single Threaded = executes one thing at a time
// -------------------------------------------------------------
